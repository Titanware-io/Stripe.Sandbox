@using System.Collections.Generic
@using System.Linq
@using Microsoft.AspNetCore.Http
@using System.Text.Json
@model Stripe.Onboarding.Features.Cart.Models.Views.CustomFlowPage

@{
    var cartId = Model.Cart != null ? @Model.Cart.Id.ToString() : "";
    var billingDetails = System.Text.Json.JsonSerializer.Serialize(Model.Order.CustomerBilling, new JsonSerializerOptions
        {
            PropertyNamingPolicy = JsonNamingPolicy.CamelCase
        });
}
<nav>
    <header>
        <hgroup>
            <h1>Checkout</h1>
        </hgroup>
    </header>
</nav>
<div x-data="{
        hasBillingDetails: '@Model.Order.CustomerBilling.Email' != '',
        billingDetails: (@billingDetails || {}),
        clientSecret: null,
        message: '',
        complete: false,
        userId: '@Model.UserId',
        orderId: '@Model.Order.Id',
        loading: false,
        stripe: {},
        elements: null,
        async init() {
            this.loading = true;
            this.stripe = Stripe('@Model.PublicKey');
            const clientSecret = new URLSearchParams(window.location.search).get('payment_intent_client_secret');
            this.clientSecret  = clientSecret;
                
            if (clientSecret) {
                this.hasBillingDetails = true;
                await this.getPaymentIntentStatus(clientSecret);
            }
            this.$events.On('@Model.PaymentForm.Event', async (result) => {
                this.billingDetails = result;
                await this.initialize();
                this.hasBillingDetails = true;
            })
            
            if(!this.hasBillingDetails){
                this.loading = false;
                return;
            }

            await this.initialize();
           
            this.loading = false;
        },
        async initialize() {
            const response = await fetch('@Model.PostbackUrl', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ cartId: '@cartId' }),
            });
            const { clientSecret } = await response.json();

            const appearance = {
                theme: 'night',
            };

            this.elements = this.stripe.elements({
                appearance, 
                clientSecret,
            });

            const paymentElementOptions = {
                layout: 'tabs',
                fields: {
                    //skip as we already collect
                    name: 'never',
                    email: 'never'
                }
            };

            const paymentElement = this.elements.create('payment', paymentElementOptions);
            paymentElement.mount('#payment-element');
        },
        async submit() {
            console.log('submit')
            this.loading = true;
            const elements = this.elements;
            const { error } = await this.stripe.confirmPayment({
                elements,
                confirmParams: {
                    return_url: '@Model.ReturnUrl',
                },
            });

            // This point will only be reached if there is an immediate error when
            // confirming the payment. Otherwise, your customer will be redirected to
            // your `return_url`. For some payment methods like iDEAL, your customer will
            // be redirected to an intermediate site first to authorize the payment, then
            // redirected to the `return_url`.
            if (error.type === 'card_error' || error.type === 'validation_error') {
                this.message = error.message;
            } else {
                this.message = 'An unexpected error occurred.';
            }
            this.loading = false;
        },
        async getPaymentIntentStatus(clientSecret){
            const { paymentIntent } = await this.stripe.retrievePaymentIntent(clientSecret);
            let message = '';
            switch (paymentIntent.status) {
                case 'succeeded':
                    const self = this;
                    message = 'Payment succeeded!';
                    this.complete = true;
                    const order = await this.updateOrder(paymentIntent);
                    setTimeout(function() {
                        self.redirectToSuccessPage();
                    }, 500);
                    //create order
                    break;
                case 'processing':
                    message = 'Your payment is processing.';
                    break;
                case 'requires_payment_method':
                    message = 'Your payment was not successful, please try again.';
                    break;
                default:
                    message = 'Something went wrong.';
                    break;
            }
            this.message = message;
        },
        async updateOrder(paymentIntent) {
            return await this.$fetch.POST('@Model.OrderApiPostbackUrl', {
                userId: this.userId,
                orderId: this.orderId,
                paymentIntentId: paymentIntent.id,
            })
        },
        redirectToSuccessPage(order) {
            window.location.replace('@Model.SuccessUrl?oid='+this.orderId)
        }
    }">
    <!--PAyment Card-->
        <article class="dense" x-show="!hasBillingDetails">
            <header>
                <nav>
                    <b>Billing details</b>
                </nav>
            </header>
            <div>
                <div x-data="formAjax(@System.Text.Json.JsonSerializer.Serialize(Model.PaymentForm, new JsonSerializerOptions
                    {
                        PropertyNamingPolicy = JsonNamingPolicy.CamelCase
                    }))"></div>
            </div>  
        </article>
    
    <!--PAyment Card-->
        <article   x-show="hasBillingDetails"
            class="dense"
           >
            <header>
                <nav>
                    Complete payment
                </nav>
            </header>
            <div>
                <!-- Display a payment form -->
                <template x-if="clientSecret">
                    <div x-text="message"></div>
                </template>
               
                <form id="payment-form" @@submit.prevent="submit()" x-show="!complete">
                    <div id="payment-element">
                        <!--Stripe.js injects the Payment Element-->
                    </div>
                    <button id="submit" :disabled="loading">
                        <div x-show="loading" class="spinner" id="spinner"></div>
                        <span id="button-text">Pay now</span>
                    </button>
                </form>
            </div>
            <footer>
                <nav>
                    <ul>
                        <li>
                            <button x-show="!complete" @@click="window.location.replace('/home');">Cancel</button>
                            <button x-show="complete" @@click="window.location.replace('/home');">Return</button>
                        </li>
                    </ul>
                </nav>
            </footer>
        </article>
</div>