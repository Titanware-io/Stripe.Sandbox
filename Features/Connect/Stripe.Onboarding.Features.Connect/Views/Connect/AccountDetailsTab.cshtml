@using System.Collections.Generic
@using System.Linq
@using Microsoft.AspNetCore.Http
@model Stripe.Onboarding.Features.Connect.Models.Views.ConnectPage

<!--Card--> 
<section x-data="{
    userId: '@Model.UserId',
    stripe: null,
    loadingText: 'loading form..',
    loading: true,
    theme: {
        theme: 'night' ,
        // overlays: 'dialog' ,
        variables: {
            fontFamily: 'Sohne, system-ui, sans-serif',
            fontWeightNormal: '500',
            borderRadius: '8px',
            colorBackground: '#0A2540',
            colorPrimary: '#EFC078',
            accessibleColorOnColorPrimary: '#1A1B25',
            colorText: 'white',
            colorTextSecondary: 'white',
            colorTextPlaceholder: '#ABB2BF',
            tabIconColor: 'white',
            logoColor: 'dark'
        },
        rules: {
            '.Input': {
                backgroundColor: '#212D63',
                border: '1px solid var(--colorPrimary)'
            }
        }
    },
    <!-- Use Connect.js without npm -->
    <!-- https://docs.stripe.com/connect/get-started-connect-embedded-components#without-npm -->
    async init() {
        const self = this;
        self.loading = true;
        const fetchClientSecret = async () => {
            const response = await fetch('@Model.PostbackUrl', {
                method: 'POST',
            });
            const { clientSecret } = await response.json();
            return clientSecret;
        };
        var key = await fetchClientSecret();
        const theme = self.theme;

        StripeConnect.onLoad = () => {
            const stripeConnectInstance = StripeConnect.init({
                // This is your test publishable API key.
                publishableKey: '@Model.PublicKey',
                fetchClientSecret: fetchClientSecret,
                appearance: theme,
            });

            // create onboarding element
            console.log('@Model.DashboardComponent')
            const accountOnboarding = stripeConnectInstance.create('@Model.DashboardComponent');

            console.log(accountOnboarding)

            // Mount onboarding element
            var container = document.getElementById('tab');
            container.appendChild(accountOnboarding);
        };
    },
    async checkAccountStatus(accountId)
    {
        const accountStatusUrl = '@Model.PostbackUrl/status';

        const statusResponse = await fetch(accountStatusUrl, {
            method: 'POST',
        });

        const { status } = await statusResponse.json();
        return status;
    }
}">
    <article class="dense">
        <header>
            <nav>
                @Model.PageTitle
            
                <a href="@Model.StripeAccountLoginUrl">Open Express Dashboard</a>
            </nav>
        </header>
        <div> 
            <div x-data="aclFormFieldsetDisabled(@Accelerate.Foundations.Common.Helpers.JsonSerializerHelper.SerializeObject(Model.Form))"></div>
        </div>
        <!--Tabs-->
        @if (Model.PageTabs != null && Model.PageTabs.Items != null && Model.PageTabs.Items.Any())
        {
            <div x-data="aclTabsNavigation(@Accelerate.Foundations.Common.Helpers.JsonSerializerHelper.SerializeObject(Model.PageTabs))"></div>
        }
        <!-- Stripe connect component -->
        <div id="tab"></div>

        <footer>
            <nav>
            </nav>
        </footer>
    </article>

</section>